// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for 'windows/hid_listener_windows.h'
///
class HidListenerBindingsWindows {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  HidListenerBindingsWindows(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  HidListenerBindingsWindows.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  bool SetKeyboardListener(
    int port,
  ) {
    return _SetKeyboardListener(
      port,
    );
  }

  late final _SetKeyboardListenerPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Dart_Port)>>(
          'SetKeyboardListener');
  late final _SetKeyboardListener =
      _SetKeyboardListenerPtr.asFunction<bool Function(int)>();

  bool SetMouseListener(
    int port,
  ) {
    return _SetMouseListener(
      port,
    );
  }

  late final _SetMouseListenerPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Dart_Port)>>(
          'SetMouseListener');
  late final _SetMouseListener =
      _SetMouseListenerPtr.asFunction<bool Function(int)>();

  void InitializeDartAPI(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _InitializeDartAPI(
      data,
    );
  }

  late final _InitializeDartAPIPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'InitializeDartAPI');
  late final _InitializeDartAPI =
      _InitializeDartAPIPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  bool InitializeListeners() {
    return _InitializeListeners();
  }

  late final _InitializeListenersPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('InitializeListeners');
  late final _InitializeListeners =
      _InitializeListenersPtr.asFunction<bool Function()>();
}

final class WindowsKeyboardEvent extends ffi.Struct {
  @ffi.Int32()
  external int eventType;

  @ffi.Uint32()
  external int vkCode;

  @ffi.Uint32()
  external int scanCode;
}

abstract class WindowsKeyboardEventType {
  static const int WKE_KeyUp = 0;
  static const int WKE_KeyDown = 1;
}

/// A port is used to send or receive inter-isolate messages
typedef Dart_Port = ffi.Int64;
